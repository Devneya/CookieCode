{"version":3,"sources":["taoensso/truss/impl.cljc"],"mappings":"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","names":["taoensso.truss.impl/rsome","pred","coll","cljs.core.reduce","acc","in","temp__5804__auto__","p","cljs.core/reduced","taoensso.truss.impl/revery?","taoensso.truss.impl/revery","taoensso.truss.impl/some?","x","taoensso.truss.impl/ensure-set","cljs.core/set?","cljs.core/set","ensure-set","taoensso.truss.impl/ks=","ks","m","cljs.core._EQ_","cljs.core/keys","taoensso.truss.impl/ks<=","clojure.set/subset?","taoensso.truss.impl/ks>=","clojure.set/superset?","taoensso.truss.impl/ks-nnil?","p1__8190#","cljs.core.get","taoensso.truss.impl/default-error-fn","data_","cljs.core/deref","data","cljs.core.ex_info","cljs.core.dissoc","taoensso.truss.impl/*data*","taoensso.truss.impl/*error-fn*","taoensso.truss.impl/safe","e8194","js/Error","_","taoensso.truss.impl/safe?","env","or__5045__auto__","cljs.core/Keyword","cljs.core/map?","cljs.core/Symbol","temp__5802__auto__","v","cljs.core/contains?","cljs.core/nil?","cljs.core/string?","cljs.core/integer?","cljs.core/number?","cljs.core/symbol?","cljs.core/keyword?","cljs.core/float?","cljs.core/vector?","cljs.core/coll?","cljs.core/list?","cljs.core/ifn?","cljs.core/fn?","cljs.core/associative?","cljs.core/sequential?","cljs.core/delay?","cljs.core/sorted?","cljs.core/counted?","cljs.core/reversible?","cljs.core/true?","cljs.core/false?","cljs.core/identity","cljs.core/not","cljs.core/boolean","taoensso.truss.impl/xpred","vec__8199","cljs.core.nth","type","a1","a2","a3","G__8202","cljs.core.sequence","cljs.core/seq","cljs.core.concat","cljs.core/List","cljs.core/vec","vec__8214","vec__8217","vec__8221","vec__8224","self","?pred","sf-a1?","sf-a2?","sf-a3?","sf-a1","sf-a2","sf-a3","sf-comp?","and__5043__auto__","G__8227","taoensso.truss.impl/error-message","this__5330__auto__","writer__5331__auto__","opt__5332__auto__","cljs.core/-write","taoensso.truss.impl/WrappedError","taoensso.truss.impl/->WrappedError","val","taoensso.truss.impl/-assertion-error","msg","taoensso.truss.impl/-dummy-error","taoensso.truss.impl/-invar-violation!","elidable?","ns-sym","?line","arg","?err","?data-fn","error-fn","G__8254","cljs.core/Delay","instant","js/Date","undefn-arg?","arg-val","arg-type","cljs.core/type","msg_","err","err-msg","?data","dynamic","data-fn","e8264","e","output","cljs.core/*assert*","cljs.core.assoc","taoensso.truss.impl/ns-sym","cljs.core.symbol","cljs.core/*ns*"],"sourcesContent":["(ns taoensso.truss.impl\n  \"Private implementation details.\"\n  (:refer-clojure :exclude [some?])\n  (:require\n   [clojure.set :as set]\n   ;; #?(:cljs [cljs.analyzer])\n   )\n  #?(:cljs\n     (:require-macros\n      [taoensso.truss.impl\n       :refer [compile-if catching -invar]])))\n\n(comment (require '[taoensso.encore :as enc]))\n\n;;;; TODO\n;; - Namespaced kw registry like clojure.spec, (truss/def <kw> <pred>)?\n;; - Ideas for easier sharing of composed preds?\n\n;;;; Manual Encore imports\n;; A bit of a nuisance but:\n;;   - Allows Encore to depend on Truss (esp. nb for back-compatibility wrappers).\n;;   - Allows Truss to be entirely dependency free.\n\n#?(:clj (defmacro if-cljs [then else] (if (:ns &env) then else)))\n#?(:clj\n   (defmacro compile-if [test then else]\n     (if (try (eval test) (catch Throwable _ false))\n       `(do ~then)\n       `(do ~else))))\n\n#?(:clj\n   (defmacro catching \"Cross-platform try/catch/finally.\"\n     ;; We badly need something like http://dev.clojure.org/jira/browse/CLJ-1293\n     ;; TODO js/Error instead of :default as temp workaround for http://goo.gl/UW7773\n     ([try-expr                     ] `(catching ~try-expr ~'_ nil))\n     ([try-expr error-sym catch-expr]\n      `(if-cljs\n         (try ~try-expr (catch js/Error  ~error-sym ~catch-expr))\n         (try ~try-expr (catch Throwable ~error-sym ~catch-expr))))\n     ([try-expr error-sym catch-expr finally-expr]\n      `(if-cljs\n         (try ~try-expr (catch js/Error  ~error-sym ~catch-expr) (finally ~finally-expr))\n         (try ~try-expr (catch Throwable ~error-sym ~catch-expr) (finally ~finally-expr))))))\n\n(defn rsome   [pred coll]       (reduce (fn [acc in] (when-let [p (pred in)] (reduced p))) nil coll))\n(defn revery? [pred coll]       (reduce (fn [acc in] (if (pred in) true (reduced nil))) true coll))\n(defn revery  [pred coll] (when (reduce (fn [acc in] (if (pred in) true (reduced nil))) true coll) coll))\n\n(comment (revery integer? [1 2 3]) (revery integer? nil))\n\n#?(:cljs (defn ^boolean some? [x] (if (nil? x) false true))\n   :clj\n   (defn some?\n     {:inline (fn [x] `(if (identical? ~x nil) false true))}\n     [x] (if (identical? x nil) false true)))\n\n(defn ensure-set [x] (if (set? x) x (set x)))\n(let [ensure-set ensure-set]\n  (defn #?(:clj ks=      :cljs ^boolean ks=)      [ks m] (=             (set (keys m)) (ensure-set ks)))\n  (defn #?(:clj ks<=     :cljs ^boolean ks<=)     [ks m] (set/subset?   (set (keys m)) (ensure-set ks)))\n  (defn #?(:clj ks>=     :cljs ^boolean ks>=)     [ks m] (set/superset? (set (keys m)) (ensure-set ks)))\n  (defn #?(:clj ks-nnil? :cljs ^boolean ks-nnil?) [ks m] (revery?     #(some? (get m %))           ks)))\n\n;;;; Truss\n\n(defn default-error-fn [data_]\n  (let [data @data_]\n    (throw (ex-info @(:msg_ data) (dissoc data :msg_)))))\n\n(def ^:dynamic *data* nil)\n(def ^:dynamic *error-fn* default-error-fn)\n\n(defn  safe [pred] (fn [x] (catching (pred x))))\n(defn- safe?\n  \"[Optimization] Returns true for common preds that are naturally non-throwing.\"\n  [env p]\n  (or\n    (keyword? p)\n    (map?     p)\n    (set?     p)\n    (let [p\n          (if (symbol? p)\n            (if-let [v #?(:clj        (resolve                       p)\n                          :cljs nil #_(cljs.analyzer/resolve-var env p))]\n              @v p)\n            p)]\n\n      (contains?\n        #{nil? #_some? string? integer? number? symbol? keyword? float?\n          set? vector? coll? list? ifn? fn? associative? sequential? delay?\n          sorted? counted? reversible? true? false? identity not boolean}\n        p))))\n\n(comment (safe? nil 'nil?))\n\n(defn- xpred\n  \"Expands any special predicate forms and returns [<expanded-pred> <safe?>].\"\n  [env pred]\n  (if-not (vector? pred)\n    [pred (safe? env pred)]\n    (let [[type a1 a2 a3] pred]\n      (assert a1 \"Special predicate [<special-type> <arg>] form w/o <arg>\")\n      (case type\n        :set=             [`(fn [~'x] (=             (ensure-set ~'x) (ensure-set ~a1))) false]\n        :set<=            [`(fn [~'x] (set/subset?   (ensure-set ~'x) (ensure-set ~a1))) false]\n        :set>=            [`(fn [~'x] (set/superset? (ensure-set ~'x) (ensure-set ~a1))) false]\n        :ks=              [`(fn [~'x] (ks=      ~a1 ~'x)) false]\n        :ks<=             [`(fn [~'x] (ks<=     ~a1 ~'x)) false]\n        :ks>=             [`(fn [~'x] (ks>=     ~a1 ~'x)) false]\n        :ks-nnil?         [`(fn [~'x] (ks-nnil? ~a1 ~'x)) false]\n        (    :el     :in) [`(fn [~'x]      (contains? (ensure-set ~a1) ~'x))  false]\n        (:not-el :not-in) [`(fn [~'x] (not (contains? (ensure-set ~a1) ~'x))) false]\n\n        :n=               [`(fn [~'x] (=  (count ~'x) ~a1)) false]\n        :n>=              [`(fn [~'x] (>= (count ~'x) ~a1)) false]\n        :n<=              [`(fn [~'x] (<= (count ~'x) ~a1)) false]\n\n        ;; Pred composition\n        (let [self (fn [?pred] (when ?pred (xpred env ?pred)))\n\n              ;; Support recursive expansion:\n              [[a1 sf-a1?] [a2 sf-a2?] [a3 sf-a3?]] [(self a1) (self a2) (self a3)]\n\n              sf-a1    (when a1 (if sf-a1? a1 `(safe ~a1)))\n              sf-a2    (when a2 (if sf-a2? a2 `(safe ~a2)))\n              sf-a3    (when a3 (if sf-a3? a3 `(safe ~a3)))\n              sf-comp? (cond a3 (and sf-a1? sf-a2? sf-a3?)\n                             a2 (and sf-a1? sf-a2?)\n                             a1 sf-a1?)]\n\n          (case type\n            :and ; all-of\n            (cond\n              a3 [`(fn [~'x] (and (~a1 ~'x) (~a2 ~'x) (~a3 ~'x))) sf-comp?]\n              a2 [`(fn [~'x] (and (~a1 ~'x) (~a2 ~'x))) sf-comp?]\n              a1 [a1 sf-a1?])\n\n            :or  ; any-of\n            (cond\n              a3 [`(fn [~'x] (or (~sf-a1 ~'x) (~sf-a2 ~'x) (~sf-a3 ~'x))) true]\n              a2 [`(fn [~'x] (or (~sf-a1 ~'x) (~sf-a2 ~'x))) true]\n              a1 [a1 sf-a1?])\n\n            :not ; complement/none-of\n            ;; Note that it's a little ambiguous whether we'd want\n            ;; safe (non-throwing) behaviour here or not so choosing\n            ;; to interpret throws as undefined to minimize surprise\n            (cond\n              a3 [`(fn [~'x] (not (or (~a1 ~'x) (~a2 ~'x) (~a3 ~'x)))) sf-comp?]\n              a2 [`(fn [~'x] (not (or (~a1 ~'x) (~a2 ~'x)))) sf-comp?]\n              a1 [`(fn [~'x] (not     (~a1 ~'x))) sf-a1?])))))))\n\n(comment\n  (xpred nil string?)\n  (xpred nil [:or string? integer? :foo]) ; t\n  (xpred nil [:or string? integer? seq])  ; f\n  (xpred nil [:or string? integer? [:and number? integer?]]) ; t\n  (xpred nil [:or string? integer? [:and number? pos?]])     ; f\n  )\n\n;; #?(:clj\n;;    (defn- fast-pr-str\n;;      \"Combination `with-out-str`, `pr`. Ignores *print-dup*.\"\n;;      [x]\n;;      (let [w (java.io.StringWriter.)]\n;;        (print-method x w)\n;;        (.toString      w))))\n\n;; (comment (enc/qb 1e5 (pr-str {:a :A}) (fast-pr-str {:a :A})))\n\n(defn- error-message\n  ;; Temporary, to support Clojure 1.9\n  ;; Clojure 1.10+ now has `ex-message`\n  [x]\n  #?(:clj  (when (instance? Throwable x) (.getMessage ^Throwable x))\n     :cljs (when (instance? js/Error  x) (.-message              x))))\n\n(deftype WrappedError [val])\n(defn -assertion-error [msg] #?(:clj (AssertionError. msg) :cljs (js/Error. msg)))\n(def  -dummy-error #?(:clj (Object.) :cljs (js-obj)))\n(defn -invar-violation!\n  ;; - http://dev.clojure.org/jira/browse/CLJ-865 would be handy for line numbers.\n  [elidable? ns-sym ?line pred arg ?err ?data-fn]\n  (when-let [error-fn *error-fn*]\n    (error-fn ; Nb consumer must deref while bindings are still active\n     (delay\n      (let [instant     #?(:clj (java.util.Date.) :cljs (js/Date.))\n            undefn-arg? (instance? WrappedError arg)\n            arg-val     (if undefn-arg? 'truss/undefined-arg       arg)\n            arg-type    (if undefn-arg? 'truss/undefined-arg (type arg))\n\n            ;; arg-str\n            ;; (cond\n            ;;   undefn-arg? \"<truss/undefined-arg>\"\n            ;;   (nil? arg)  \"<truss/nil>\"\n            ;;   :else\n            ;;   (binding [*print-readably* false\n            ;;             *print-length*   3]\n            ;;     #?(:clj  (fast-pr-str arg)\n            ;;        :cljs (pr-str      arg))))\n\n            ?err\n            (cond\n              (identical? -dummy-error ?err) nil\n              (instance?  WrappedError ?err)\n              (.-val     ^WrappedError ?err)\n              :else                    ?err)\n\n            msg_\n            (delay\n              (let [msg (str \"Invariant failed at \" ns-sym (when ?line (str \"|\" ?line)) \": \"\n                          (list pred arg-val))]\n\n                (if-let [err ?err]\n                  (let [err-msg #_(ex-message err) (error-message err)]\n                    (if undefn-arg?\n                      (str msg \"\\r\\n\\r\\nError evaluating arg: \"  err-msg)\n                      (str msg \"\\r\\n\\r\\nError evaluating pred: \" err-msg)))\n                  msg)))\n\n            ?data\n            (let [dynamic *data*\n                  arg\n                  (when-let [data-fn ?data-fn]\n                    (catching (data-fn) e\n                      {:truss/error e}))]\n\n              (when (or   dynamic      arg)\n                {:dynamic dynamic :arg arg}))\n\n            output\n            {:msg_  msg_\n             :dt    instant\n             :pred  pred\n             :arg   {:value arg-val\n                     :type  arg-type}\n\n             :loc {:ns ns-sym :line ?line}\n             :env {:elidable?  elidable?\n                   :*assert*   *assert*}}\n\n            output (if-let [v ?data] (assoc output :data v) output)\n            output (if-let [v ?err]  (assoc output :err  v) output)]\n\n        output)))))\n\n(defn- ns-sym [] (symbol (str *ns*)))\n\n#?(:clj\n   (defn const-form? \"See issue #12\" [x]\n     (not (or (list? x) (instance? clojure.lang.Cons x)))))\n\n#?(:clj\n   (defmacro -invar\n     \"Written to maximize performance + minimize post Closure+gzip Cljs code size.\"\n     [elidable? truthy? line pred x ?data-fn]\n     (let [const-x? (const-form? x) ; Common case\n           [pred* safe-pred?] (xpred #?(:clj nil :cljs &env) pred)]\n\n       (if const-x? ; Common case\n         (if safe-pred? ; Common case\n           `(if (~pred* ~x)\n              ~(if truthy? true x)\n              (-invar-violation! ~elidable? '~(ns-sym) ~line '~pred ~x nil ~?data-fn))\n\n           `(let [~'e (catching (if (~pred* ~x) nil -dummy-error) ~'e ~'e)]\n              (if (nil? ~'e)\n                ~(if truthy? true x)\n                (-invar-violation! ~elidable? '~(ns-sym) ~line '~pred ~x ~'e ~?data-fn))))\n\n         (if safe-pred?\n           `(let [~'z (catching ~x ~'e (WrappedError. ~'e))\n                  ~'e (if (instance? WrappedError ~'z)\n                        ~'z\n                        (if (~pred* ~'z) nil -dummy-error))]\n\n              (if (nil? ~'e)\n                ~(if truthy? true 'z)\n                (-invar-violation! ~elidable? '~(ns-sym) ~line '~pred ~'z ~'e ~?data-fn)))\n\n           `(let [~'z (catching ~x ~'e (WrappedError. ~'e))\n                  ~'e (catching\n                        (if (instance? WrappedError ~'z)\n                          ~'z\n                          (if (~pred* ~'z) nil -dummy-error)) ~'e ~'e)]\n\n              (if (nil? ~'e)\n                ~(if truthy? true 'z)\n                (-invar-violation! ~elidable? '~(ns-sym) ~line '~pred ~'z ~'e ~?data-fn))))))))\n\n(comment\n  (macroexpand '(-invar true false 1      string?    \"foo\"             nil)) ; Type 0\n  (macroexpand '(-invar true false 1 [:or string?]   \"foo\"             nil)) ; Type 0\n  (macroexpand '(-invar true false 1    #(string? %) \"foo\"             nil)) ; Type 1\n  (macroexpand '(-invar true false 1      string?    (str \"foo\" \"bar\") nil)) ; Type 2\n  (macroexpand '(-invar true false 1    #(string? %) (str \"foo\" \"bar\") nil)) ; Type 3\n  (enc/qb 1e6\n    (string? \"foo\")                                          ; Baseline\n    (-invar true false 1   string?    \"foo\"             nil) ; Type 0\n    (-invar true false 1 #(string? %) \"foo\"             nil) ; Type 1\n    (-invar true false 1   string?    (str \"foo\" \"bar\") nil) ; Type 2\n    (-invar true false 1 #(string? %) (str \"foo\" \"bar\") nil) ; Type 3\n    (try\n      (string? (try \"foo\" (catch Throwable _ nil)))\n      (catch Throwable _ nil)))\n  ;; [41.86 50.43 59.56 171.12 151.2 42.0]\n\n  (-invar false false 1 integer? \"foo\"   nil) ; Pred failure example\n  (-invar false false 1 zero?    \"foo\"   nil) ; Pred error example\n  (-invar false false 1 zero?    (/ 5 0) nil) ; Form error example\n  )\n\n#?(:clj\n   (defmacro -invariant [elidable? truthy? line args]\n     (let [bang?      (= (first args) :!) ; For back compatibility, undocumented\n           elidable?  (and elidable? (not bang?))\n           elide?     (and elidable? (not *assert*))\n           args       (if bang? (next args) args)\n           in?        (= (second args) :in) ; (have pred :in xs1 xs2 ...)\n           args       (if in? (cons (first args) (nnext args)) args)\n\n           data?      (and (> (count args) 2) ; Distinguish from `:data` pred\n                           (= (last (butlast args)) :data))\n           ?data-fn   (when data? `(fn [] ~(last args)))\n           args       (if data? (butlast (butlast args)) args)\n\n           auto-pred? (= (count args) 1) ; Unique common case: (have ?x)\n           pred       (if auto-pred? 'taoensso.truss.impl/some? (first args))\n           [?x1 ?xs]  (if auto-pred?\n                        [(first args) nil]\n                        (if (nnext args) [nil (next args)] [(second args) nil]))\n           single-x?  (nil? ?xs)\n           in-fn\n           `(fn [~'__in] ; Will (necessarily) lose exact form\n              (-invar ~elidable? ~truthy? ~line ~pred ~'__in ~?data-fn))]\n\n       (if elide?\n         (if truthy?\n           true\n           (if single-x? ?x1 (vec ?xs)))\n\n         (if-not in?\n\n           (if single-x?\n             ;; (have pred x) -> x\n             `(-invar ~elidable? ~truthy? ~line ~pred ~?x1 ~?data-fn)\n\n             ;; (have pred x1 x2 ...) -> [x1 x2 ...]\n             (if truthy?\n               `(do ~@(mapv (fn [x] `(-invar ~elidable? ~truthy? ~line ~pred ~x ~?data-fn)) ?xs) true)\n               (do    (mapv (fn [x] `(-invar ~elidable? ~truthy? ~line ~pred ~x ~?data-fn)) ?xs))))\n\n           (if single-x?\n\n             ;; (have? pred :in xs) -> bool\n             ;; (have  pred :in xs) -> xs\n             (if truthy?\n               `(taoensso.truss.impl/revery? ~in-fn ~?x1)\n               `(taoensso.truss.impl/revery  ~in-fn ~?x1))\n\n             ;; (have? pred :in xs1 xs2 ...) -> [bool1 ...]\n             ;; (have  pred :in xs1 xs2 ...) -> [xs1   ...]\n             (if truthy?\n               `(do ~@(mapv (fn [xs] `(taoensso.truss.impl/revery? ~in-fn ~xs)) ?xs) true)\n               (do    (mapv (fn [xs] `(taoensso.truss.impl/revery  ~in-fn ~xs)) ?xs)))))))))\n"],"x_google_ignoreList":[0]}