{"version":3,"sources":["devneya/utils.cljs"],"mappings":";;AAIA,+BAAA,/BAAKA;AAEL,0BAAA,2CAAA,yEAAA,6CAAA,oEAAA,gBAAA,oEAAA,IAAA,0EAAA,mFAAA,2CAAA,qDAAA,SAAA,7lBAAKC,spBAIuC,CAAA,6DAAA,+CAAA,wDAAA;AAK5C;;;yBAAA,zBAAMC;AAAN,AAGE,OAAc,KAAAC;;AAEhB,AAAA;;;;;;;4BAAA,oCAAAC,hEAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,wDAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,wDAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,0DAAA,1DAAMD,qEAKFE,eAAeC,OAAOC;AAL1B,AAME,GACE,4DAAA,5DAACC,6CAAEH;AAAkB,OAAAI,0DAAAC,mCAAA,uDAAA,gBAAA,KAAA,GAAA,8CAAA,qDAAA,KAAAC,gBAAA;AAAA,AAAA,0FAAa,qDAAA,RAAKL,wDAAWC;GAA7B,OAAA,KAAA,IAAA;;AADvB,AAES,OAAAE,0DAAAC,mCAAA,qDAAA,gBAAA,KAAA,GAAA,8CAAA,qDAAA,KAAAC,gBAAA;AAAA,AAAA,0FAAa,qDAAA,RAAKL,0DAAaC;GAA/B,OAAA,KAAA,IAAA;;;;;AARX,CAAA,0DAAA,1DAAMJ,qEASFG,OAAOC;AATX,AAUG,+DAAA,xDAACK,4DAAcN,OAAOC;;;AAVzB,CAAA,oDAAA,pDAAMJ;;AAAN,AAYA;;;;;iCAAA,jCAAMU,0EAGHC;AAHH,AAIE,YAAAC,QACC,WAAKC,QAAQC;AAAb,AACE,IAAAC,mBAAA,AAAAC,mDAAA;AAAA,AAAA,AAAAC,kCAAA;AAAA,AAAA,IAAAC,mBAAA,iBAAAC,wBAAA,WAAAC;AAAA,AAAA,IAAAC,kBAAA,CAAAD,YAAA;AAAA,AAAA,GAAA,CAAAC,oBAAA;AAAA,IAAAD,kBAAAA;AAAA,AAAA,OAAAE,4CAAAF,gBAAA,IAAiBT;;AAAjB,GAAA,CAAAU,oBAAA;AAAA,IAAAE,aAAA,CAAAH,YAAA;IAAAI,aAAA,+EAAAD,gCAAAA,9GAAKV,wCAAAA,oDAAAA;IAALO,kBAAAA;AAAA,AAAA,OAAAK,6CAAAL,gBAAAI;;AAAA;;;;AAAA,AAAA;;;AAAA,AAAA,IAAAE,iBAAA,CAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA;AAAA,AAAA,CAAAA,eAAA,OAAAC;;AAAA,CAAAD,eAAA,OAAA;;AAAAA;;kFAAAN;;AAAA,AAAA,IAAAQ,2BAAA,iBAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA,AAAAV,sBAAAC;AAAA,AAAA,GAAA,AAAAU,mCAAAD,sBAAA;AAAA;;AAAAA;;;;gBAAA,IAAAE,oBAAAC;AAAA,AAAA,IAAAC,uBAAAb;AAAA,AAAA,CAAAa,qBAAA,OAAAF;;AAAAE;AAAA,GAAA,AAAAC,cAAA,CAAAd,YAAA;AAAA,IAAAe,uBAAAf;AAAA,AAAA,CAAAe,qBAAA,OAAA,AAAAC,gBAAA,CAAAhB,YAAA;;AAAAe;AAAA,MAAAJ;;;AAAA;;AAAA,AAAA,GAAA,AAAAD,mCAAAF,yBAAA;AAAA,eAAAR;;;;AAAAQ;;;;;yEAAAR;;;;;kFAAAA;;;;;;;;;IAAAiB,uBAAA,iBAAAC,iBAAA,AAAApB;AAAA,AAAA,CAAAoB,eAAAC,AAAA,OAAAxB;;AAAAuB;;AAAA,AAAA,OAAAE,2DAAAH;;;AAAAtB","names":["devneya.utils/ok-http-status","devneya.utils/ai-config","devneya.utils/date-hms","js/Date","var_args","G__18909","devneya.utils/log-with-id","js/Error","log-level-flag","log-id","log-string","cljs.core._EQ_","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","devneya.utils.log_with_id","devneya.utils/chan->promise","c","js/Promise","resolve","_","c__13712__auto__","cljs.core.async.chan","cljs.core.async.impl.dispatch/run","f__13713__auto__","switch__10983__auto__","state_18920","state_val_18921","cljs.core.async.impl.ioc-helpers/take!","inst_18917","inst_18918","cljs.core.async.impl.ioc-helpers/return-chan","statearr-18922","state-machine__10984__auto__","ret-value__10985__auto__","result__10986__auto__","cljs.core/keyword-identical?","ex__10987__auto__","e18923","statearr-18924","cljs.core/seq","statearr-18925","cljs.core/first","state__13714__auto__","statearr-18927","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped"],"sourcesContent":["(ns devneya.utils\n  (:require [taoensso.timbre :as timbre]\n            [cljs.core.async :refer [<! go]]))\n\n(def ok-http-status 200)\n\n(def ai-config {:OPENAI-API-URL \"https://api.openai.com/v1/chat/completions\" \n                :OPENAI-MODEL \"gpt-3.5-turbo\" \n                :TEMPERATURE 0.3\n                :INITIAL-CONTEXT [{:role    \"system\"\n                                   :content (str \"You are a system that only generates code in JavaScript.\\n\"\n                                                 \"Do not describe or contextualize the code.\\n\"\n                                                 \"Do not apply any formatting or syntax highlighting.\\n\"\n                                                 \"Do not wrap the code in a code block.\")}]})\n\n(defn date-hms\n  \"Get current time and dater\"\n  []\n  (.toUTCString (js/Date.)))\n\n(defn log-with-id\n  \"Log data for specified log-id using logger function\\n\n   log-level-flags:\n   0 - error\n   1 - info\"\n  ([log-level-flag log-id log-string]\n  (cond \n    (= log-level-flag 0) (timbre/error(str log-id \" \" log-string))\n    :else  (timbre/info (str log-id \" | \" log-string))))\n  ([log-id log-string]\n   (log-with-id 1 log-id log-string)))\n\n(defn chan->promise \n  \"Get channel. \\n\n   Return js promise where data from channel is redirected.\"\n  [c] \n  (js/Promise.\n   (fn [resolve _]\n     (go (resolve (<! c))))))"]}