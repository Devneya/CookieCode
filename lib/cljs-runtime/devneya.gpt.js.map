{"version":3,"sources":["devneya/gpt.cljs"],"mappings":";;AAOA,4BAAA,5BAAMA,gEAAeC;AAArB,AAAA,kDAAA,eAAA,mBAAA,gBAEmB,CAAA,sDAAeA;;AAElC,yBAAA,zBAAMC,0DAAYC,KAAKC,KAAKC;AAA5B,AAAA,kDAAA,iLAAA,6LAAA,xTACU,AAAA,kGAAeC,2FACT,AAAA,kGAAcA,qFACjB,uDAAA,mFAAA,2CAAA,0DAAA,/OAACC,+CAAOF,2LAAgBF,8DAAcC;;AAEnD,AAAA;;;;;;;6CAAA,qDAAAI,lGAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,yEAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,yEAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,2EAAA,3EAAMD,sFAIFE,OAAOX,WAAWG,KAAKD,KAAKE,QAAQQ;AAJxC,AAKG,+DAAA,/DAACC,wDAAYF;;AACb,oPAAA,2CAAA,iGAAA,8GAAA,gFAAA,MAAA,7jBAACG,2DAAU,AAAA,uGAAiBT,iLAAqB,AAACN,0BAAcC,gFACX,AAACC,uBAAWC,KAAKC,KAAKC,yJAE1BQ;;;AATpD,CAAA,2EAAA,3EAAMH,sFAUFE,OAAOX,WAAWG,KAAKD,KAAKE;AAVhC,AAWG,OAACW,yEAA+BJ,OAAOX,WAAWG,KAAKD,KAAKE,QAAQ,AAACY;;;AAXxE,CAAA,qEAAA,rEAAMP;;AAAN,AAaA;;;wBAAA,xBAAMQ,wDAEHjB,WAAWkB;AAFd,AAGE,IAAMC,MAAI,AAACH;AAAX,AACE,6OAAA,2CAAA,iGAAA,2OAAA,gFAAA,MAAA,1rBAACF,2DACA,AAAA,uGAAiBT,iLACP,AAACN,0BAAcC,gFACX,uBAAA,vBAACC,8BAAkBiB,OAAO,AAAA,wGAAkBb,0KAEhDc;;AACX,OAACC,+BAAcD;;AAEnB,AAAA,sFAASF","names":["devneya.gpt/build-headers","openai-key","devneya.gpt/build-body","role","text","context","devneya.utils/ai-config","cljs.core.concat","var_args","G__18934","devneya.gpt/get-chatgpt-api-async-response","js/Error","log-id","output-channel","devneya.utils.log_with_id","cljs_http.client.post","devneya.gpt.get_chatgpt_api_async_response","cljs.core.async.chan","devneya.gpt/test-post","prompt","out","devneya.utils/chan->promise"],"sourcesContent":["(ns devneya.gpt\n  (:require [failjure.core :as f]\n            [cljs-http.client :as http]\n            [cljs.core.async :refer [chan]]\n            [devneya.utils :refer [chan->promise ai-config log-with-id]])\n  (:require-macros [failjure.core]))\n\n(defn build-headers [openai-key]\n  {\"Content-Type\" \"application/json\"\n   \"Authorization\" (str \"Bearer \" openai-key)})\n\n(defn build-body [role text context]\n  {:model (:OPENAI-MODEL ai-config)\n   :temperature (:TEMPERATURE ai-config)\n   :messages (concat context [{:role role :content text}])})\n\n(defn get-chatgpt-api-async-response\n  \"Get api key, text of the message, role for the message, previous context and output channel ((chan) by default).\\n\n   Send request to ChatGPT.\\n\n   Return output channel with result.\"\n  ([log-id openai-key text role context output-channel]\n   (log-with-id log-id \"get-chatgpt-api-response function started\")\n   (http/post (:OPENAI-API-URL ai-config) {:headers (build-headers openai-key)\n                                           :json-params (build-body role text context)\n                                           :with-credentials? false\n                                           :channel output-channel}))\n  ([log-id openai-key text role context]\n   (get-chatgpt-api-async-response log-id openai-key text role context (chan))))\n\n(defn test-post\n  \"testfunc\"\n  [openai-key prompt]\n  (let [out (chan)]\n    (http/post \n     (:OPENAI-API-URL ai-config) \n     {:headers (build-headers openai-key)\n      :json-params (build-body \"user\" prompt (:INITIAL-CONTEXT ai-config))\n      :with-credentials? false\n      :channel out})\n    (chan->promise out))\n  )\n(:export test-post)"]}