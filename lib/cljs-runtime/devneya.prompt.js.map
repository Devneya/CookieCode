{"version":3,"sources":["devneya/prompt.cljs"],"mappings":"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","names":["var_args","G__11899","devneya.prompt/make-initial-prompt","js/Error","log-id","openai-key","prompt","devneya.utils.log_with_id","devneya.codeGeneration.generate_code_async","devneya.prompt.make_initial_prompt","devneya.utils/date-hms","devneya.prompt/make-fix-prompt","generated-code","exec-error","attempt","G__11901","devneya.prompt/make-fix-prompt-chain","attempt-limit","generated-code-channel","out-chan","cljs.core.async.chan","c__7862__auto__","cljs.core.async.impl.dispatch/run","f__7863__auto__","switch__7803__auto__","state_11935","state_val_11936","inst_11912","inst_11913","inst_11914","statearr-11937","statearr-11938","statearr-11939","cljs.core.async.impl.ioc-helpers/take!","inst_11903","cljs.core.async.impl.ioc-helpers/put!","inst_11931","statearr-11940","inst_11924","inst_11906","inst_11907","failjure.core/ok?","statearr-11941","statearr-11942","statearr-11943","inst_11922","statearr-11944","inst_11904","statearr-11945","statearr-11946","statearr-11947","inst_11916","inst_11917","inst_11918","inst_11910","statearr-11948","inst_11933","cljs.core.async.impl.ioc-helpers/return-chan","inst_11920","statearr-11949","inst_11926","statearr-11950","inst_11928","statearr-11951","statearr-11952","state-machine__7804__auto__","ret-value__7805__auto__","result__7806__auto__","cljs.core/keyword-identical?","ex__7807__auto__","e11953","statearr-11954","cljs.core/seq","statearr-11955","cljs.core/first","state__7864__auto__","statearr-11956","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","devneya.exec/exec-code","devneya.prompt.make_fix_prompt_chain","failjure.core.fail","devneya.prompt/make-prompt-chain","G__11958","devneya.prompt/make-prompt-promise","devneya.utils/chan->promise","devneya.prompt/make-request"],"sourcesContent":["(ns devneya.prompt\n  (:require [devneya.codeGeneration :as gen]\n            [devneya.exec :as exec]\n            [failjure.core :as f]\n            [cljs.core.async :refer [chan <! >!]]\n            [devneya.prompt :as prompt]\n            [devneya.utils :refer [chan->promise log-with-id date-hms]])\n  (:require-macros [failjure.core]\n                   [cljs.core.async.macros :refer [go]]))\n\n(defn make-initial-prompt\n  ([log-id openai-key prompt]\n  (log-with-id log-id \"Making initial prompt\")\n  (gen/generate-code-async log-id\n                           openai-key\n                           (str \"Write only code. Do not use ```. \" prompt)))\n  ([openai-key prompt]\n   (make-initial-prompt (date-hms) openai-key prompt)))\n\n(defn make-fix-prompt\n  \"Get api key, generated code, its execution error and attempt number.\\n\n   Make generate code request to fix.\\n\n   Return async channel with fixed code or with fail.\"\n  [log-id openai-key generated-code exec-error attempt]\n  (log-with-id log-id (str \"Making fix prompt number \" attempt))\n  (gen/generate-code-async log-id\n                           openai-key\n                           (str \"Here is a code:\\n\"\n                                generated-code\n                                \"\\nAn error occurred while executing this code:\\n\"\n                                exec-error\n                                \"\\nRewrite code to fix it. Write only code. Do not use ```.\")))\n\n(defn make-fix-prompt-chain\n  \"Get api key, request attempt limit, current code generation channel and attempt number.\\n\n   Make fix prompt chain: try to execute current code and send fix prompt, if needed, *MAX_REPS* times.\\n\n   Return async channel with fail if couldn't fix the code and if it occured on some generation request, or fixed code otherwise.\"\n  ([log-id openai-key attempt-limit generated-code-channel attempt]\n   (log-with-id log-id \"Fix prompt chain started\")\n   (let [out-chan (chan)]\n     (go (f/if-let-failed?\n          [result (<! generated-code-channel)]\n          (>! out-chan result)\n          (f/if-let-failed?\n           [exec-result (exec/exec-code log-id result)]\n           (do (log-with-id log-id (str \"Evaluation failed on attempt \" attempt \"! Retrying...\"))\n               (>! out-chan (if (< attempt attempt-limit)\n                              (<! (make-fix-prompt-chain\n                                   log-id\n                                   openai-key\n                                   attempt-limit\n                                   (make-fix-prompt log-id openai-key result exec-result attempt)\n                                   (inc attempt)))\n                              (f/fail \"Couldn't generate working code for the given request.\\n\"))))\n           (>! out-chan result))))\n     out-chan))\n  ([log-id openai-key attempt-limit generated-code-channel]\n   (make-fix-prompt-chain log-id openai-key attempt-limit generated-code-channel 1)))\n\n(defn make-prompt-chain\n  \"Get api key, request attempt limit and prompt.\\n\n   Make prompt chain: one initial prompt, then start fix prompt chain.\\n\n   Return async channel with fail, if couldn't generate working code and if it occured on some prompt or with working code.\"\n  [log-id openai-key attempt-limit prompt]\n  (make-fix-prompt-chain\n   log-id\n   openai-key\n   attempt-limit\n   (make-initial-prompt log-id openai-key prompt)))\n\n(defn make-prompt-promise\n  ([log-id openai-key attempt-limit prompt]\n   (chan->promise (make-prompt-chain log-id openai-key attempt-limit prompt)))\n  ([openai-key attempt-limit prompt]\n   (chan->promise (make-prompt-chain (date-hms) openai-key attempt-limit prompt))))\n\n(defn make-request \n[openai-key prompt]\n  (chan->promise (make-initial-prompt openai-key prompt)))\n\n(:export make-prompt-promise)\n(:export make-request)"]}