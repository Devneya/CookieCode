{"version":3,"sources":["failjure/core.cljc"],"mappings":";;AAMA,AAAA,AACA,AAAA,AACA,AAAA,AACA,AAAA,AACA,AAAA,AACA,AAAA,AAGA,AAAA;AAAA;;;0BAAA,1BAAaS;;AAAb,IAAAT,kDAAA,WACYU;AADZ,AAAA,IAAAT,kBAAA,EAAA,SAAA,OAAA,fACYS,oBAAAA;IADZR,kBAAA,CAAAC,4BAAA,AAAAC,YAAAH;AAAA,AAAA,GAAA,GAAA,CAAAC,mBAAA;AAAA,QAAAA,gDAAAA,sDAAAA,RACYQ,kCAAAA;;AADZ,IAAAL,kBAAA,CAAAF,4BAAA;AAAA,AAAA,GAAA,GAAA,CAAAE,mBAAA;AAAA,QAAAA,gDAAAA,sDAAAA,RACYK,kCAAAA;;AADZ,MAAA,AAAAJ,2BAAA,oBACYI;;;;AADZ,AAAA,8BAAA,9BACGP,oEAASO;AADZ,AAAA,GAAA,EAAA,GAAA,SAAA,aAAA,GAAA,CAAA,sDAAA,/EACYA,yBAAAA;AADZ,OACYA,mDAAAA;;AADZ,OAAAV,gDACYU;;;;AADZ,IAAAH,4CAAA,WAEYG;AAFZ,AAAA,IAAAT,kBAAA,EAAA,SAAA,OAAA,fAEYS,oBAAAA;IAFZR,kBAAA,CAAAM,sBAAA,AAAAJ,YAAAH;AAAA,AAAA,GAAA,GAAA,CAAAC,mBAAA;AAAA,QAAAA,gDAAAA,sDAAAA,RAEYQ,kCAAAA;;AAFZ,IAAAL,kBAAA,CAAAG,sBAAA;AAAA,AAAA,GAAA,GAAA,CAAAH,mBAAA;AAAA,QAAAA,gDAAAA,sDAAAA,RAEYK,kCAAAA;;AAFZ,MAAA,AAAAJ,2BAAA,oBAEYI;;;;AAFZ,AAAA,wBAAA,xBAEGF,wDAASE;AAFZ,AAAA,GAAA,EAAA,GAAA,SAAA,aAAA,GAAA,CAAA,gDAAA,zEAEYA,yBAAAA;AAFZ,OAEYA,6CAAAA;;AAFZ,OAAAH,0CAEYG;;;;AAFZ,AAKA,AAAA,AAAA,CAAAD,wBAAA,UAAA;;AAAA,CAAAN,4BAAA,UAEE,WAAUO;AAAV,AAAA;;;AAFF,CAAAF,sBAAA,UAGE,WAAUE;AAAV,AAAA;;;AAHF,AAAA,CAAAD,wBAAA,OAAA;;AAAA,CAAAN,4BAAA,OAca,WAAUO;AAAV,AAAA;;;AAdb,CAAAF,sBAAA,OAea,WAAUE;AAAV,AAAgB,mDAAKA;;;AAflC,AAAA,CAAA,AAAA,2CAAAC,3CAiBaC;;AAjBb,CAAA,AAAA,AAiBaA,gEACA,WAAUF;AAAV,AAAA,eAAA,XAAUA;AAAV,AAAA;;;AAlBb,CAAA,AAAA,AAiBaE,0DAEA,WAAUF;AAAV,AAAA,eAAA,XAAUA;AAAV,AAAgB,OAAWA;;AAGxC,0BAAA,1BAAMG,4DAAKC;AAAX,AAAc,OAACC,cAAI,AAACZ,4BAAQW;;AAI5B,AAAA,AAAA,AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,AAAA,CAAA,AAAA,oEAAA,WAAAE,mBAAAC,lGAAWoE;;AAAX,AAAA,IAAArE,yBAAA;AAAA,AAAA,OAAAA,8DAAAC,gBAAA;;;AAAA,CAAA,AAAA,oEAAA,WAAAC,mBAAAC,OAAAC,zGAAWiE;;AAAX,AAAA,IAAAnE,yBAAA;AAAA,AAAA,IAAAG,WAAAF;IAAAE,eAAA,EAAA,CAAAA,oBAAAC,oBAAA,AAAAD,aAAA;AAAA,AAAA,QAAAA;KAAA;AAAAE;;;;AAAA,OAAAC,4CAAAC,gBAAAN,OAAAC;;;;;AAAA,CAAA,AAAA,yEAAA,WAAAM,mBAAAC,gBAAAC,vHAAWyD;;AAAX,AAAA,IAAA3D,yBAAA;AAAA,AAAA,OAAAG,+CAAA,WAAAC,kBAAAC;AAAA,AAAA,IAAAC,aAAAD;IAAAE,kBAAA,AAAAC,4CAAAF,WAAA,IAAA;IAAAG,kBAAA,AAAAD,4CAAAF,WAAA,IAAA;AAAA,AAAA,QAAAL,gDAAAA,8CAAAG,kBAAAG,gBAAAE,mBAAAR,0BAAAG,kBAAAG,gBAAAE;GAAAP,mBAAAF;;;AAAA,CAAA,AAAA,gFAAA,WAAAU,mBAAAC,qBAAAC,nIAAW+C;;AAAX,AAAA,IAAAjD,yBAAA;AAAA,AAAA,IAAAG,wBAAA,WAAAC;AAAA,AAAA,OAAAC,+BAAAJ,qBAAA,oBAAA,GAAA,IAAA,GAAAC,mBAAAE;;AAAA,AAAA,OAAAC,+BAAAJ,qBAAAE,sBAAA,0BAAA,KAAA,IAAAD,mBAAA,AAAAI,+CAAA,mFAAA,KAAAC,2BAAA,KAAA,EAAA,IAAA,AAAAA,sCAAA,CAAA,2DAAApB,gBAAA,eAAAE;;;AAAA,CAAA,AAAA,wEAAA,WAAAmB,nFAAWyC;;AAAX,AAAA,IAAAzC,eAAA;AAAA,AAAA,YAAAC,qBAAA,IAAAD,aAAA,EAAA,mFAAA,mEAAA,kBAAAnB,iBAAA,AAAAqB,oBAAArB,iBAAA,AAAAsB;;;AAAA,CAAA,AAAA,gEAAA,WAAAC,3EAAWqC;;AAAX,AAAA,IAAArC,yBAAA;AAAA,AAAAC;;;AAAA,CAAA,AAAA,sEAAA,WAAAC,jFAAWmC;;AAAX,AAAA,IAAAnC,yBAAA;AAAA,AAAA,kCAAA3B,eAAA0B,cAAAxB,gBAAA0B,nEAAWkC;;;AAAX,CAAA,AAAA,oEAAA,WAAAjC,/EAAWiC;;AAAX,AAAA,IAAAjC,yBAAA;AAAA,AAAA,QAAA,IAAA,AAAAC,gBAAA5B;;;AAAA,CAAA,AAAA,2DAAAd,3DAAW0E;;AAAX,CAAA,AAAA,gFAAA,hFAAWA,2FAEC3E;;AAFZ,AAAA,eAAA,XAEYA;AAFZ,AAAA;;;AAAA,CAAA,AAAA,0EAAA,1EAAW2E,qFAGC3E;;AAHZ,AAAA,eAAA,XAGYA;AAHZ,AAGkB,OAAA,yFAAUA;;;AAH5B,CAAA,AAAA,gEAAA,WAAA4C,3EAAW+B;;AAAX,AAAA,IAAA/B,yBAAA;AAAA,AAAA,IAAAC,kBAAAJ;AAAA,AAAA,GAAA,GAAA,CAAAI,mBAAA;AAAAA;;AAAA,IAAAA,sBAAA,AAAA,WAAAC;AAAA,AAAA,QAAA,aAAA,AAAAC,8BAAAD;GAAAF;AAAA,AAAA,CAAAH,gBAAAI;;AAAAA;;;;AAAA,CAAA,AAAA,kEAAA,WAAAG,UAAAC,vFAAW0B;;AAAX,AAAA,IAAA3B,gBAAA;AAAA,AAAA,SAAA,GAAA,CAAAC,cAAA,aAAA,EAAA,CAAA,AAAAD,8BAAA,AAAAC,6BAAA,EAAA,AAAAC,6CAAA,AAAAF,sBAAA,AAAAC,yBAAA,AAAAC,6CAAA,AAAAF,uBAAA,AAAAC;;;AAAA,CAAA,AAAA,iEAAA,WAAAE,mBAAAC,/FAAWuB;;AAAX,AAAA,IAAAxB,yBAAA;AAAA,AAAA,GAAA,AAAAE,0BAAA,iFAAA,+EAAAD;AAAA,OAAAE,+CAAA,AAAAC,qBAAA,AAAAC,6CAAA,mCAAAL,wBAAAZ,eAAAa;;AAAA,kCAAAvC,eAAA0B,cAAA,AAAAkB,oBAAA,AAAAH,+CAAAvC,gBAAAqC,kBAAA,xJAAWuB;;;;AAAX,CAAA,AAAA,sFAAA,WAAAjB,mBAAAjD,pHAAWkE;;AAAX,AAAA,IAAAjB,yBAAA;AAAA,AAAA,IAAAC,WAAAlD;IAAAkD,eAAA,EAAA,CAAAA,oBAAA/C,oBAAA,AAAA+C,aAAA;AAAA,AAAA,QAAAA;KAAA;AAAA;;;;AAAA,OAAAN,0BAAAtC,gBAAAN;;;;;AAAA,CAAA,AAAA,wEAAA,WAAAmD,mBAAAC,gBAAA3B,tHAAWyC;;AAAX,AAAA,IAAAf,yBAAA;AAAA,AAAA,IAAAE,cAAAC;IAAAC,cAAAH;AAAA,AAAA,oBAAA,CAAAC,4CAAAA,0CAAA,2DAAAE,eAAAF,sBAAA,2DAAAE;AAAA,kCAAA9B,SAAAK,cAAAxB,gBAAA,7DAAW4D;;AAAX,kCAAA9D,eAAA0B,cAAA,AAAA0B,8CAAAlD,gBAAA8C,gBAAA3B,UAAA,3IAAWyC;;;;AAAX,CAAA,AAAA,kEAAA,WAAAT,7EAAWS;;AAAX,AAAA,IAAAT,yBAAA;AAAA,AAAA,OAAAC,cAAA,AAAAnC,+CAAA,mFAAA,KAAAoC,mBAAA,2DAAAvD,eAAA,eAAAE;;;AAAA,CAAA,AAAA,yEAAA,WAAAsD,mBAAAnC,vGAAWyC;;AAAX,AAAA,IAAAN,yBAAA;AAAA,AAAA,kCAAAxD,eAAAqB,SAAAnB,gBAAA0B,9DAAWkC;;;AAAX,CAAA,AAAA,sEAAA,WAAAL,mBAAAC,pGAAWI;;AAAX,AAAA,IAAAL,yBAAA;AAAA,AAAA,GAAA,AAAAE,wBAAAD;AAAA,OAAAD,kEAAA,AAAAG,eAAAF,oBAAA,KAAA,AAAAE,eAAAF,oBAAA;;AAAA,OAAApD,+CAAAuD,gBAAAJ,uBAAAC;;;;AAAA,CAAA,AAAAI,iCAAA;AAAA,AAAA,AAAA;;;AAAA,CAAA,AAAAA,uCAAA;;AAAA,CAAA,AAAAA,4CAAA,WAAAC;AAAA,AAAA,YAAAC,eAAA,KAAA,wBAAA,KAAA,IAAA;;;AAAA,CAAA,AAAAF,+CAAA,WAAAC,mBAAAE;AAAA,AAAA,OAAAC,iBAAAD,qBAAA;;;AAAA;;;6BAAA,7BAAWM,kEAASvE;AAApB,AAAA,YAAA8D,8BAAA,KAAA,KAAA,lBAAoB9D;;;AAApB;;;gCAAA,wCAAAmE,xEAAWK;AAAX,AAAA,IAAAJ,uBAAA,iBAAAC,WAAA,AAAA5B,+CAAA0B,SAAA;AAAA,AAAA,GAAA,AAAAG,wBAAAH;AAAA,OAAAxB,6CAAA,mCAAA0B;;AAAAA;;;AAAA,AAAA,YAAAP,sBAAA,AAAA,yFAAAK,UAAA,KAAA,AAAAvB,oBAAAwB,sBAAA;;;AAAAN,AAMA,AAAA,qBAAA,6BAAAW,lDAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,iDAAA,CAAA,UAAA;;;;AAAA,IAAAC,yBAAA;AAAA,AAAA,IAAAC,0BAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA;;AAAA,AAAA,GAAA,CAAAA,wBAAAD;AAAA,AAAA,AAAAD,4BAAA,CAAA,UAAAE;;AAAA,eAAA,CAAAA,wBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,KAAAC,qBAAA,AAAAJ,6BAAA,KAAA,IAAA;AAAA,AAAA,OAAAD,wDAAA,CAAA,UAAA,MAAAI;;;;;AAAA,CAAA,mDAAA,nDAAMJ,8DACFW;AADJ,AACS,OAACf,2BAAUe;;;AADpB,AAAA,CAAA,0DAAA,1DAAMX,qEAEFW,IAAMC;AAFV,AAGG,OAAChB,2BAAU,AAACiB,8CAAMC,mBAAOH,IAAIC;;;AAHhC;AAAA,CAAA,uCAAA,WAAAN,lDAAMN;AAAN,AAAA,IAAAO,WAAA,AAAAC,gBAAAF;IAAAA,eAAA,AAAAG,eAAAH;AAAA,AAAA,IAAAI,qBAAA;AAAA,AAAA,OAAAA,wDAAAH,SAAAD;;;AAAA,CAAA,6CAAA,7CAAMN;;AAAN,AAKA;;;wBAAA,xBAAMe,wDAGHC,UAAUC;AAHb,AAIE,oBAAI,AAAChH,4BAAQgH;AACX,QAACD,0CAAAA,yDAAAA,jBAAUC,qCAAAA;;AACXA;;;AAEJ,uBAAA,vBAAMC,sDAAQC;AAAd,AACE,IAAA,AACG,QAACA,wCAAAA,0CAAAA;gBADJ,eAAAC,XAE4CC;AAF5C,AAE+CA;;AA0GjD,2BAAA,3BAAMC,8DAAOC,UAAUC;AAAvB,AACE,oBAAI,AAAA,2FAAW,AAACC,eAAKF;AACnB,QAACA,0CAAAA,kDAAAA,VAAUC,8BAAAA;;AACXD;;;AAGJ;;;kCAAA,lCAAOG,4EAEJC,SAASC;AAFZ,AAMO,OAACjG,+CAAO,iBAAAoG,NAAKI;AAAL,AAAA,IAAAH,aAAAD;WAAA,AAAA/F,4CAAAgG,WAAA,IAAA,lEAAYI;eAAZ,AAAApG,4CAAAgG,WAAA,IAAA,tEAAiBJ;AAAjB,AAAA,OAAAK,iDAAA,AAAAtD,cAAA,AAAAnC,sDAAA,KAAA6C,eAAA,KAAA,AAAA,wEAAA,KAAA,IAAA,OAAA,KAAAA,eAAA,KAAA,AAAA6C,cAAA,AAAAD,iDAAA,AAAAtD,cAAA,AAAAnC,+CAAA,KAAA6C,eAAA,KAAA,AAAA,4FAAA,KAAA,IAAA,OAAA,KAAAA,eAAA,cAAA,KAAA,IAAA,WAAA,KAAA,IAAA,yDAAA,KAAAA,eAAA,KAAA,AAAA4C,iDAAA,AAAAtD,cAAA,AAAAnC,sDAAA,KAAA6C,eAAA,KAAA,AAAA,sGAAA,KAAA,IAAA,OAAA,KAAAA,eAAA,KAAA,AAAA6C,cAAA,AAAAD,iDAAA,AAAAtD,cAAA,AAAAnC,+CAAA,KAAA6C,eAAA,UAAA,KAAA,IAAA,OAAA,KAAAA,eAAA,KAAA,AAAA,4FAAA,KAAA,IAAA,WAAA,KAAA,IAAA,yDAAA,KAAAA,eAAA,KAAA,AAAA,4FAAA,KAAA,IAAA,OAAA,KAAAA,eAAA,WAAA,KAAA,IAAA,eAAA,KAAA,IAAA,/8BACkBuC,0iBACKQ,8XAEfD;gFAPhBR,tDACA,kDAAA,lDAACE,lBACD,AAACC,LAMOF;;AAuBf,yBAAA,zBAAOS,0DACJV;AADH,AAEE,2DAAA,WAAAW,iBAAAC,hFAACC;AAAD,AAAc,GAAI,qBAAAF,rBAACG;AAAL,OAAAR,iDAAA,AAAAtD,cAAA,AAAAnC,+CAAA,KAAA6C,eAAA,KAAA,AAAA,sFAAA,KAAA,IAAA,OAAA,KAAAA,eAAA,KAAA,AAAA4C,iDAAA,AAAAtD,cAAA,AAAAnC,sDAAA,KAAA6C,eAAA,KAAA,AAAA,uEAAA,KAAA,IAAA,OAAA,KAAAA,eAAA,KAAA,AAAA6C,cAAA,AAAAD,iDAAA,AAAAtD,cAAA,AAAAnC,oDAAA,KAAA,IAAA,yDAAA,KAAA6C,eAAA,KAAAkD,iBAAA,KAAA,IAAA,eAAA,KAAA,IAAA;;AAAAA;;GAGDZ;;AA4Df;;;;4BAAA,5BAAMe,gEAGHC,KAAK/H,EAAE+F;AAHV,AAIE,oBAAI,CAACgC,qCAAAA,wCAAAA,LAAK/H,oBAAAA;AAAGA;;AAAE,OAACgI,iDAAKjC;;;AAEvB,AAAKkC,mCAAa,AAACC,gDAAQJ,0BAAYK;AACvC,AAAKC,kCAAY,AAACF,gDAAQJ,0BAAYO;AACtC,AAAKC,sCAAgBL;AACrB,AAAKM,wCAAkB,AAACL,gDAAQJ,0BAAY,AAACU,6CAAKvI,cAAIwI;AACtD,AAAKC,qCAAe,AAACR,gDAAQJ,0BAAYa","names":["failjure$core$HasFailed$failed_QMARK_$dyn","x__5393__auto__","m__5394__auto__","failjure.core/failed?","goog/typeOf","m__5392__auto__","cljs.core/missing-protocol","failjure$core$HasFailed$message$dyn","failjure.core/message","failjure.core/HasFailed","self","cljs.core/PROTOCOL_SENTINEL","js/Error","failjure.core/ok?","v","cljs.core/not","this__5343__auto__","k__5344__auto__","this__5345__auto__","k11045","else__5346__auto__","G__11055","cljs.core/Keyword","message","cljs.core.get","__extmap","this__5363__auto__","f__5364__auto__","init__5365__auto__","cljs.core.reduce","ret__5366__auto__","p__11063","vec__11064","k__5367__auto__","cljs.core.nth","v__5368__auto__","this__5358__auto__","writer__5359__auto__","opts__5360__auto__","pr-pair__5361__auto__","keyval__5362__auto__","cljs.core/pr-sequential-writer","cljs.core.concat","cljs.core/PersistentVector","G__11044","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__5341__auto__","__meta","this__5338__auto__","__hash","this__5347__auto__","cljs.core/count","this__5339__auto__","h__5154__auto__","coll__5340__auto__","cljs.core/hash-unordered-coll","this11046","other11047","cljs.core._EQ_","this__5353__auto__","k__5354__auto__","cljs.core/contains?","cljs.core.dissoc","cljs.core/-with-meta","cljs.core.into","cljs.core/not-empty","this__5350__auto__","G__11111","this__5351__auto__","k__5352__auto__","pred__11114","cljs.core/keyword-identical?","expr__11115","cljs.core.assoc","this__5356__auto__","cljs.core/seq","cljs.core/MapEntry","this__5342__auto__","this__5348__auto__","entry__5349__auto__","cljs.core/vector?","cljs.core/-nth","cljs.core/-conj","failjure.core/Failure","this__5389__auto__","cljs.core/List","writer__5390__auto__","cljs.core/-write","G__11049","extmap__5385__auto__","G__11131","cljs.core/record?","failjure.core/->Failure","failjure.core/map->Failure","var_args","G__11144","failjure.core/fail","args-arr__5794__auto__","len__5769__auto__","i__5770__auto__","argseq__5795__auto__","cljs.core/IndexedSeq","seq11137","G__11138","cljs.core/first","cljs.core/next","self__5754__auto__","msg","fmt-parts","cljs.core.apply","goog.string/format","failjure.core/attempt","handle-fn","val-or-failed","failjure.core/try-fn","body-fn","e11152","e#","failjure.core/else*","else-part","result","cljs.core/meta","failjure.core/attempt-all*","bindings","body","cljs.core.partition","cljs.core/reverse","p__11175","vec__11176","cljs.core.sequence","cljs.core/vec","inner","bind","failjure.core/try-wrap","p1__11186#","p2__11187#","cljs.core.map_indexed","cljs.core/odd?","failjure.core/assert-with","pred","failjure.core.fail","failjure.core/assert-some?","cljs.core.partial","cljs.core/some?","failjure.core/assert-nil?","cljs.core/nil?","failjure.core/assert-not-nil?","failjure.core/assert-not-empty?","cljs.core.comp","cljs.core/empty?","failjure.core/assert-number?","cljs.core/number?"],"sourcesContent":["(ns failjure.core\n  #?@(:cljs [(:require [goog.string :refer [format]]\n                       [goog.string.format])]))\n\n; Public API\n; failed?, message part of protocol\n(declare fail)\n(declare attempt-all)\n(declare if-failed)\n(declare when-failed)\n(declare attempt->)\n(declare attempt->>)\n\n\n(defprotocol HasFailed\n  (failed? [self])\n  (message [self]))\n\n\n(extend-protocol HasFailed\n  nil\n  (failed? [self] false)\n  (message [self] \"nil\")\n\n  #?@(:clj [Object\n            (failed? [self] false)\n            (message [self] (str self))\n\n            Exception\n            (failed? [self] true)\n            (message [self] (.getMessage self))]\n\n      :cljs [default\n             (failed? [self] false)\n             (message [self] (str self))\n\n             js/Error\n             (failed? [self] true)\n             (message [self] (.-message self))]))\n\n\n(defn ok? [v] (not (failed? v)))\n\n\n; Define a failure\n(defrecord Failure [message]\n  HasFailed\n  (failed? [self] true)\n  (message [self] (:message self)))\n\n\n(defn fail\n  ([msg] (->Failure msg))\n  ([msg & fmt-parts]\n   (->Failure (apply format msg fmt-parts))))\n\n(defn attempt\n  \"Accepts an error-handling function and a (possibly failed) value\"\n  {:added \"2.1\"}\n  [handle-fn val-or-failed]\n  (if (failed? val-or-failed)\n    (handle-fn val-or-failed)\n    val-or-failed))\n\n(defn try-fn [body-fn]\n  (try\n     (body-fn)\n     (catch #?(:clj Exception :cljs :default) e# e#)))\n\n\n; Exceptions are failures too, make them easier\n(defmacro try* [& body]\n  `(try-fn (fn [] ~@body)))\n\n\n;; Validating binding macros\n(defmacro if-let-ok?\n  \"Binding convenience.\n\n  Acts just like let for non-failing values:\n\n    (if-let-ok? [v (something-which-may-fail)]\n      (do-something-else v)\n      (do-something-on-failure v))\n\n  Note that the value of v is the result of something-which-may-fail\n  in either case. If no else branch is provided, nil is returned:\n\n    (if-let-ok? [v (fail \\\"Goodbye\\\")]\n      \\\"Hello\\\")\n    ;; Returns #failjure.core.Failure{:message \\\"Goodbye\\\"}\n\n  Note that the above is identical in function to simply calling\n  (fail \\\"Goodbye\\\")\"\n  ([[v-sym form] ok-branch]\n   `(let [result# ~form]\n      (if-let-ok? [~v-sym result#] ~ok-branch result#)))\n  ([[v-sym form] ok-branch failed-branch]\n   `(let [result# ~form\n          ~v-sym result#]\n      (if (ok? result#)\n        ~ok-branch\n        ~failed-branch))))\n\n\n(defmacro when-let-ok?\n  \"Analogous to if-let-ok? and when-let.\n\n    (when-let-ok? [v (some-fn)]\n      (prn \\\"WAS OK\\\")\n      (do-something v))\n\n  Returns the error in case of failure\"\n  [[v-sym form] & ok-branches]\n  `(if-let-ok? [~v-sym ~form]\n     (do ~@ok-branches)))\n\n(defmacro if-let-failed?\n  \"Inverse of if-let-ok?\n\n    (if-let-failed? [v (some-fn)]\n      (prn \\\"V Failed!\\\")\n      (prn \\\"V is OK!\\\"))\n\n  If called with 1 branch, returns the value in case of non-failure:\n\n    (if-let-failed? [v \\\"Hello\\\"]\n      (prn \\\"V Failed!\\\"))  ;; => returns \\\"Hello\\\"\n  \"\n  ([[v-sym form] failed-branch]\n   `(if-let-ok? [~v-sym ~form] ~v-sym ~failed-branch))\n  ([[v-sym form] failed-branch ok-branch]\n   `(if-let-ok? [~v-sym ~form] ~ok-branch ~failed-branch)))\n\n(defmacro when-let-failed?\n  \"Inverse of when-let-ok?\n\n    (when-let-faild? [v (some-fn)]\n      (prn \\\"FAILED\\\")\n      (handle-failure v))\n\n  Returns the value in case of non-failure\"\n  [[v-sym form] & failed-branches]\n  `(if-let-failed? [~v-sym ~form] (do ~@failed-branches))\n  )\n\n\n\n\n\n\n(defmacro when-failed\n  \"Use in combination with `attempt-all`. If any binding in `attempt-all` failed,\n   run the body given the failure/error as an argument.\n\n  Usage:\n\n  (attempt-all [_ (fail \\\"Failure\\\")]\n    ; do something\n    (when-failed [e]\n      (print \\\"ERROR:\\\" (message e))))\"\n  {:added \"0.1.3\"}\n  [arglist & body]\n  `(with-meta (fn ~arglist ~@body)\n     {:else-fn? true}))\n\n(defmacro if-failed\n  \"DEPRECATED: Use when-failed instead\"\n  {:deprecated \"0.1.3\"}\n  [arglist & body]\n  `(with-meta (fn ~arglist ~@body)\n     {:else-fn? true}))\n\n(defn else* [else-part result]\n  (if (:else-fn? (meta else-part))\n    (else-part result)\n    else-part))\n\n\n(defn- attempt-all*\n  \"Rearrange the bindings into a pyramid of `if-let-failed?` calls\"\n  [bindings body]\n  (->> bindings\n       (partition 2)\n       (reverse)\n       (reduce (fn [inner [bind body]]\n                 `(let [result# ~body]\n                    (if-let-failed? [~bind result#]\n                      result#\n                      ~inner)))\n               body)))\n\n(defmacro attempt-all\n  \"Used like `let`, but short-circuits in case of\n  a failed binding. Can be used in combination with when-failed\n  to handle the failure.\n\n  Unlike `let`, only accepts a single form to execute after the bindings.\n\n    (attempt-all [x \\\"Ok\\\"\n                  y (fail \\\"Fail\\\")]\n      x\n      (when-failed [e]\n        (message e))) ; => \\\"Fail\\\"\n\n  \"\n  ([bindings return]\n   (attempt-all* bindings return))\n  ([bindings return else]\n   `(if-let-failed? [result# (attempt-all ~bindings ~return)]\n      (else* ~else result#)\n      result#)))\n\n(defn- try-wrap\n  [bindings]\n  (map-indexed #(if (odd? %1)\n                  `(try-fn (fn [] ~%2))\n                  %2)\n               bindings))\n\n(defmacro try-all\n  \"Similar to `attempt-all` but catches possible exceptions.\n\n  Wraps each arm of the binding in a `try*` to treat them as Failures and short circuit.\"\n  ([bindings return]\n   (attempt-all* (try-wrap bindings) return))\n  ([bindings return else]\n   `(if-let-failed? [result# (try-all ~bindings ~return)]\n      (else* ~else result#)\n      result#)))\n\n(defmacro attempt->\n  \"Deprecated. Use ok-> instead.\"\n  ([start] start)\n  ([start form] `(-> ~start ~form))\n  ([start form & forms]\n   `(if-let-failed? [new-start# (attempt-> ~start ~form)]\n      new-start#\n      (attempt-> new-start# ~@forms))))\n\n\n(defmacro attempt->>\n  \"Deprecated. Use ok->> instead.\"\n  ([start] start)\n  ([start form] `(->> ~start ~form))\n  ([start form & forms]\n   `(if-let-failed? [new-start# (attempt->> ~start ~form)]\n      new-start#\n      (attempt->> new-start# ~@forms))))\n\n(defmacro ok->\n  \"Like some->, but with ok? instead of some?\n   (i.e., short-circuits when it encounters a failure)\"\n  ([start & forms]\n   `(if-let-failed? [v# ~start]\n      v#\n      (attempt-> v# ~@forms))))\n\n(defmacro ok->>\n  \"Like some->>, but with ok? instead of some?\n   (i.e., short-circuits when it encounters a failure)\"\n  ([start & forms]\n   `(if-let-failed? [v# ~start]\n      v#\n      (attempt->> v# ~@forms))))\n\n(defmacro as-ok->\n  \"Like as-> but with ok? \"\n  {:added \"2.1\"}\n  [expr name & forms]\n  `(attempt-all [~name ~expr\n                 ~@(interleave (repeat name) (butlast forms))]\n    ~(if (empty? forms)\n       name\n       (last forms))))\n\n;; Assertions: Helpers\n\n(defn assert-with\n  \"If (pred v) is true, return v\n   otherwise, return (f/fail msg)\"\n  [pred v msg]\n  (if (pred v) v (fail msg)))\n\n(def assert-some? (partial assert-with some?))\n(def assert-nil? (partial assert-with nil?))\n(def assert-not-nil? assert-some?)\n(def assert-not-empty? (partial assert-with (comp not empty?)))\n(def assert-number? (partial assert-with number?))\n"],"x_google_ignoreList":[0]}